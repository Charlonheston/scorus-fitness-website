---
/**
 * Componente Button reutilizable
 * Variants: primary, secondary, outline, ghost
 */

import { cn } from '@lib/utils';

export interface Props {
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
  href?: string;
  type?: 'button' | 'submit' | 'reset';
  class?: string;
  disabled?: boolean;
}

const {
  variant = 'primary',
  size = 'md',
  href,
  type = 'button',
  class: className,
  disabled = false,
} = Astro.props;

const baseClasses = 'inline-flex items-center justify-center font-medium transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed';

const variantClasses = {
  primary: 'bg-primary-600 text-white hover:bg-primary-700 focus:ring-primary-500',
  secondary: 'bg-secondary-600 text-white hover:bg-secondary-700 focus:ring-secondary-500',
  outline: 'border-2 border-primary-600 text-primary-600 hover:bg-primary-50 focus:ring-primary-500',
  ghost: 'text-gray-700 hover:bg-gray-100 focus:ring-gray-500',
};

const sizeClasses = {
  sm: 'px-4 py-2 text-sm rounded-md',
  md: 'px-6 py-3 text-base rounded-lg',
  lg: 'px-8 py-4 text-lg rounded-lg',
};

const classes = cn(
  baseClasses,
  variantClasses[variant],
  sizeClasses[size],
  className
);

const Tag = href ? 'a' : 'button';
---

<Tag
  class={classes}
  href={href}
  type={href ? undefined : type}
  disabled={disabled}
  {...Astro.props}
>
  <slot />
</Tag>

