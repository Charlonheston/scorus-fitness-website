---
/**
 * Header principal del sitio - Con efecto scroll transparente
 * Incluye navegación desktop, selector de idioma y trigger para menú móvil
 */

import Navigation from './Navigation.astro';
import LanguageSwitcher from '@/components/i18n/LanguageSwitcher.astro';
import MobileMenu from './MobileMenu.astro';

// Detectar idioma desde la URL
const currentPath = Astro.url.pathname;
const pathParts = currentPath.split('/').filter(Boolean);
const potentialLang = pathParts[0];
const currentLang = ['en', 'fr', 'de', 'hu'].includes(potentialLang) ? potentialLang : 'es';
---

<header 
  id="main-header" 
  class="fixed top-0 z-50 w-full header-transparent"
  style="color: white;"
>
  <div class="container">
    <div class="flex h-16 md:h-28 items-center justify-between w-full" style="color: white;">
      <!-- Logo - Con cambio dinámico blanco/negro -->
      <div class="flex items-center flex-shrink-0">
        <a href={`/${currentLang}/`} class="header-link group flex items-center" style="color: white;">
          <!-- Logo Blanco (transparente) -->
          <img 
            id="logo-white"
            src="/images/logos/logo-scorus-white.webp" 
            alt="Scorus Fitness" 
            class="h-12 w-auto transition-all duration-300 group-hover:opacity-80 sm:h-24"
            width="auto"
            height="auto"
            loading="eager"
            decoding="async"
          />
          <!-- Logo Negro (scroll) -->
          <img 
            id="logo-black"
            src="/images/logos/logo-scorus.webp" 
            alt="Scorus Fitness" 
            class="hidden h-12 w-auto transition-all duration-300 group-hover:opacity-80 sm:h-24"
            width="auto"
            height="auto"
            loading="eager"
            decoding="async"
          />
        </a>
      </div>

      <!-- Navegación Desktop + Language Switcher (oculto en móvil) -->
      <div id="header-nav" class="hidden lg:flex lg:items-center lg:space-x-8 ml-auto">
        <Navigation />
        <LanguageSwitcher />
      </div>

      <!-- Menú Móvil (solo visible en móvil) -->
      <div class="flex items-center gap-4 lg:hidden ml-auto flex-shrink-0">
        <LanguageSwitcher />
        <MobileMenu />
      </div>
    </div>
  </div>
</header>

<script>
  // Efecto de scroll optimizado para el header - EVITA REFLOWS FORZADOS
  function initHeaderScroll() {
    const header = document.getElementById('main-header');
    if (!header) return;

    // ✅ CACHEAR TODOS LOS ELEMENTOS AL INICIO (no en cada scroll)
    const headerContainer = header.querySelector('.container > .flex') as HTMLElement | null;
      const navBar = header.querySelector('#header-nav');
    const mainLinks = navBar ? Array.from(navBar.querySelectorAll(':scope > nav > div > a, :scope > div > button')) : [];
    const mainSpans = navBar ? Array.from(navBar.querySelectorAll(':scope > nav > div > a > span')) : [];
    const mainSvgs = navBar ? Array.from(navBar.querySelectorAll(':scope > nav > div > a > svg, :scope > div > button > svg')) : [];
    const logoWhite = header.querySelector('#logo-white') as HTMLElement | null;
    const logoBlack = header.querySelector('#logo-black') as HTMLElement | null;
    const mobileMenuButton = header.querySelector('#mobile-menu-button') as HTMLElement | null;
    const mobileContainer = header.querySelector('.flex.items-center.gap-4.lg\\:hidden') as HTMLElement | null;
    const hamburgerSvg = mobileMenuButton?.querySelector('svg') as SVGElement | null;

    let ticking = false;
    let lastKnownScrollPosition = 0;
    let isScrolled = false;

    function updateHeaderStyles(scrollPos: number) {
      const shouldBeScrolled = scrollPos > 50;
      
      // ✅ Solo actualizar si el estado cambió (evita manipulaciones innecesarias)
      if (shouldBeScrolled === isScrolled) return;
      isScrolled = shouldBeScrolled;

      // ✅ Usar requestAnimationFrame para batch de cambios DOM
      requestAnimationFrame(() => {
        if (!header) return; // TypeScript null check
        
        if (isScrolled) {
          // Estado sólido (scrolled) - NEGRO
          header.classList.remove('header-transparent');
          header.classList.add('header-solid', 'bg-white', 'shadow-md');
          header.style.color = 'black';
          
          if (headerContainer) headerContainer.style.color = 'black';
          
          logoWhite?.classList.add('hidden');
          logoBlack?.classList.remove('hidden');
          
          mainLinks.forEach(el => {
            if (!el.classList.contains('text-red-600')) {
              (el as HTMLElement).style.color = 'black';
              el.classList.remove('!text-white');
              el.classList.add('!text-black');
            }
          });
          
          mainSpans.forEach(el => {
            const closestLink = el.closest('a');
            if (closestLink && !closestLink.classList.contains('text-red-600')) {
              (el as HTMLElement).style.color = 'black';
              (el as HTMLElement).classList.remove('!text-white');
              (el as HTMLElement).classList.add('!text-black');
        }
          });
          
          mainSvgs.forEach(el => {
            (el as HTMLElement).style.stroke = 'black';
            (el as HTMLElement).style.color = 'black';
          });
          
          if (mobileMenuButton) mobileMenuButton.style.color = 'black';
          if (hamburgerSvg) {
            hamburgerSvg.style.stroke = 'black';
            hamburgerSvg.style.color = 'black';
          }
          if (mobileContainer) mobileContainer.style.color = 'black';
          
        } else {
          // Estado transparente (top) - BLANCO
          header.classList.remove('header-solid', 'bg-white', 'shadow-md');
          header.classList.add('header-transparent');
          header.style.color = 'white';
          
          if (headerContainer) headerContainer.style.color = 'white';
          
          logoWhite?.classList.remove('hidden');
          logoBlack?.classList.add('hidden');
          
        mainLinks.forEach(el => {
          if (!el.classList.contains('text-red-600')) {
            (el as HTMLElement).style.color = 'white';
              el.classList.remove('!text-black');
            el.classList.add('!text-white');
          }
        });
        
        mainSpans.forEach(el => {
          const closestLink = el.closest('a');
          if (closestLink && !closestLink.classList.contains('text-red-600')) {
            (el as HTMLElement).style.color = 'white';
              (el as HTMLElement).classList.remove('!text-black');
              (el as HTMLElement).classList.add('!text-white');
          }
        });
        
        mainSvgs.forEach(el => {
          (el as HTMLElement).style.stroke = 'white';
          (el as HTMLElement).style.color = 'white';
        });
        
          if (mobileMenuButton) mobileMenuButton.style.color = 'white';
          if (hamburgerSvg) {
            hamburgerSvg.style.stroke = 'white';
            hamburgerSvg.style.color = 'white';
          }
          if (mobileContainer) mobileContainer.style.color = 'white';
        }
      });
    }

    // ✅ Handler optimizado con throttling via requestAnimationFrame
    function handleScroll() {
      lastKnownScrollPosition = window.scrollY;
      
      if (!ticking) {
        requestAnimationFrame(() => {
          updateHeaderStyles(lastKnownScrollPosition);
          ticking = false;
        });
        ticking = true;
          }
        }
        
    // ✅ Evento con passive para mejor performance
    window.addEventListener('scroll', handleScroll, { passive: true });
    
    // Ejecutar inmediatamente
    updateHeaderStyles(window.scrollY);
  }

  // Inicializar cuando el DOM esté listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initHeaderScroll);
  } else {
    initHeaderScroll();
  }
</script>

<style>
  /* Estilos optimizados para el header - Reducir Render Blocking */
  
  /* OPTIMIZACIONES DE PERFORMANCE */
  #main-header {
    /* Forzar capa de composición para GPU acceleration */
    transform: translateZ(0);
    will-change: background-color, box-shadow;
    backface-visibility: hidden;
    -webkit-backface-visibility: hidden;
    
    /* Transiciones suaves y performantes */
    transition: background-color 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
  }
  
  /* Optimizar logos para cambios rápidos */
  #logo-white,
  #logo-black {
    will-change: opacity;
    transition: opacity 0.2s ease;
  }
  
  /* ASEGURAR QUE EL HEADER SE MANTENGA COMPLETAMENTE FIJO */
  #main-header {
    position: fixed !important;
    top: 0 !important;
    left: 0 !important;
    right: 0 !important;
    width: 100% !important;
    z-index: 50 !important;
    height: 64px !important;
    min-height: 64px !important;
    max-height: 64px !important;
    box-sizing: border-box !important;
    padding: 0 !important;
    margin: 0 !important;
    border: none !important;
  }

  @media (min-width: 768px) {
    #main-header {
      height: 112px !important;
      min-height: 112px !important;
      max-height: 112px !important;
    }
  }

  #main-header .container {
    height: 100% !important;
    display: flex !important;
    align-items: center !important;
    width: 100% !important;
    padding: 0 1rem !important;
    box-sizing: border-box !important;
  }

  #main-header .flex.h-28 {
    height: 100% !important;
    width: 100% !important;
    box-sizing: border-box !important;
    padding: 0 !important;
    margin: 0 !important;
  }
  
  /* Asegurar que las clases de Tailwind con ! se apliquen */
  #main-header .\!text-white {
    color: white !important;
  }

  #main-header .\!text-black {
    color: black !important;
  }

  /* Links activos siempre en rojo (en el NAV principal) */
  #main-header nav > div > a.text-red-600,
  #main-header nav > div > a.text-red-600 span {
    color: rgb(220, 38, 38) !important;
  }

  /* Hover en links PRINCIPALES (no dropdowns) siempre en rojo */
  #main-header #header-nav > nav > div > a:hover,
  #main-header #header-nav > div > button:hover {
    color: rgb(220, 38, 38) !important;
  }

  #main-header #header-nav > nav > div > a:hover svg,
  #main-header #header-nav > nav > div > a:hover path,
  #main-header #header-nav > div > button:hover svg,
  #main-header #header-nav > div > button:hover path {
    stroke: rgb(220, 38, 38) !important;
    color: rgb(220, 38, 38) !important;
  }

  /* ========== DROPDOWNS SIEMPRE CON FONDO BLANCO Y TEXTO NEGRO ========== */
  #main-header nav > div > div,
  #main-header .group > div {
    background-color: white !important;
  }

  /* FORZAR texto negro en todos los elementos del dropdown */
  #main-header nav > div > div a,
  #main-header nav > div > div span,
  #main-header .group > div a,
  #main-header .group > div span {
    color: rgb(55, 65, 81) !important;
  }

  /* Hover en dropdowns en ROJO */
  #main-header nav > div > div a:hover,
  #main-header nav > div > div a:hover span,
  #main-header .group > div a:hover,
  #main-header .group > div a:hover span {
    color: rgb(220, 38, 38) !important;
  }

  /* Link activo en dropdown: fondo negro con texto blanco */
  #main-header nav > div > div a.bg-black,
  #main-header nav > div > div a.bg-black span {
    background-color: black !important;
    color: white !important;
  }

  /* Líneas activas en el NAV principal */
  #main-header.header-transparent nav > div > a > span[class*="bg-red"] {
    background-color: white !important;
  }

  #main-header.header-solid nav > div > a > span[class*="bg-red"] {
    background-color: rgb(220, 38, 38) !important;
  }
</style>
