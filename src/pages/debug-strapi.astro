---
/**
 * P√°gina temporal de debug para verificar conexi√≥n con Strapi
 * Accede desde: /debug-strapi
 */

const STRAPI_URL = import.meta.env.PUBLIC_STRAPI_URL || 'http://localhost:1337';
const STRAPI_API_TOKEN = import.meta.env.STRAPI_API_TOKEN || import.meta.env.PUBLIC_STRAPI_API_TOKEN || '';

// Intentar hacer fetch
let testResult: any = null;
let error: string | null = null;

try {
  const url = new URL(`${STRAPI_URL}/api/articles`);
  url.searchParams.append('locale', 'es');
  url.searchParams.append('sort', 'createdAt:desc');
  url.searchParams.append('pagination[pageSize]', '5');

  const headers: HeadersInit = {
    'Content-Type': 'application/json',
  };

  if (STRAPI_API_TOKEN) {
    (headers as Record<string, string>)['Authorization'] = `Bearer ${STRAPI_API_TOKEN}`;
  }

  const response = await fetch(url.toString(), { headers });
  testResult = {
    status: response.status,
    statusText: response.statusText,
    ok: response.ok,
    headers: Object.fromEntries(response.headers.entries()),
    body: await response.json().catch(() => 'Failed to parse JSON'),
  };
} catch (err) {
  error = err instanceof Error ? err.message : String(err);
}
---

<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Debug Strapi Connection</title>
  <style>
    body {
      font-family: monospace;
      padding: 2rem;
      max-width: 1200px;
      margin: 0 auto;
      background: #1a1a1a;
      color: #fff;
    }
    .section {
      background: #2a2a2a;
      padding: 1.5rem;
      margin: 1rem 0;
      border-radius: 8px;
      border-left: 4px solid #ff6b6b;
    }
    .success { border-left-color: #51cf66; }
    .warning { border-left-color: #ffd43b; }
    .info { border-left-color: #339af0; }
    pre {
      background: #1a1a1a;
      padding: 1rem;
      border-radius: 4px;
      overflow-x: auto;
    }
    code {
      background: #1a1a1a;
      padding: 0.2rem 0.4rem;
      border-radius: 3px;
    }
    h2 { margin-top: 0; }
    .status-ok { color: #51cf66; }
    .status-error { color: #ff6b6b; }
  </style>
</head>
<body>
  <h1>üîç Debug Strapi Connection</h1>

  <div class="section info">
    <h2>üìã Environment Variables</h2>
    <pre>PUBLIC_STRAPI_URL = {STRAPI_URL || 'NOT SET'}
STRAPI_API_TOKEN = {STRAPI_API_TOKEN ? `${STRAPI_API_TOKEN.substring(0, 20)}...` : 'NOT SET'}
Environment = {import.meta.env.MODE}</pre>
  </div>

  {error ? (
    <div class="section">
      <h2 class="status-error">‚ùå Error</h2>
      <pre>{error}</pre>
    </div>
  ) : testResult ? (
    <>
      <div class={testResult.ok ? 'section success' : 'section'}>
        <h2 class={testResult.ok ? 'status-ok' : 'status-error'}>
          {testResult.ok ? '‚úÖ Response OK' : `‚ùå Response Error: ${testResult.status}`}
        </h2>
        <pre>{JSON.stringify(testResult, null, 2)}</pre>
      </div>

      {testResult.status === 401 && (
        <div class="section warning">
          <h2>üîê 401 Unauthorized - Checklist</h2>
          <ol>
            <li>Verifica que <code>STRAPI_API_TOKEN</code> est√© configurado en Vercel</li>
            <li>Verifica que el token tenga permisos en Strapi:
              <ul>
                <li>Ve a: <code>{STRAPI_URL}/admin</code></li>
                <li><code>Settings ‚Üí API Tokens</code></li>
                <li>Verifica que el token tenga permisos: <code>Article ‚Üí find</code></li>
              </ul>
            </li>
            <li>Verifica permisos p√∫blicos en Strapi:
              <ul>
                <li><code>Settings ‚Üí Users & Permissions Plugin ‚Üí Roles ‚Üí Public</code></li>
                <li>Marca: <code>Article ‚Üí find</code> y <code>Article ‚Üí findOne</code></li>
              </ul>
            </li>
          </ol>
        </div>
      )}
    </>
  ) : null}
</body>
</html>

