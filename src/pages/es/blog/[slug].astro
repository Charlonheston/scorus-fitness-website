---
/**
 * Página Individual de Artículo del Blog
 * Ruta dinámica: /es/blog/[slug]
 */

import Layout from '@layouts/Layout.astro';
import { getArticleBySlug, getArticles } from '@lib/strapi';
import { formatDate } from '@lib/utils';

// Generar todas las rutas estáticas en tiempo de build
export async function getStaticPaths() {
  try {
    const articles = await getArticles('es');
    
    // Si no hay artículos, retornar array vacío
    if (!articles || articles.length === 0) {
      return [];
    }
    
    return articles.map((article) => ({
      params: { slug: article.attributes.slug },
      props: { article },
    }));
  } catch (error) {
    console.error('Error in getStaticPaths:', error);
    return [];
  }
}

// Obtener el artículo de las props
const params = await Astro.params;
const article = Astro.props.article || await getArticleBySlug(params?.slug || '', 'es');

// Si el artículo no existe, devolver 404
if (!article) {
  return Astro.redirect('/es/blog');
}

const publishedDate = article.attributes.createdAt 
  ? (article.attributes.publishedAt 
      ? new Date(article.attributes.publishedAt)
      : new Date(article.attributes.createdAt))
  : new Date();

// Obtener artículos relacionados (últimos 3, excluyendo el actual)
const allArticles = await getArticles('es');
const relatedArticles = allArticles
  .filter((a) => a.id !== article.id)
  .slice(0, 3);
---

<Layout
  title={`${article.attributes.title} | Blog Scorus`}
  description={typeof article.attributes.content === 'string' 
    ? article.attributes.content.replace(/<[^>]*>/g, '').substring(0, 160) 
    : 'Artículo del blog'}
>
  <!-- Hero Article -->
  <section class="bg-black py-16 text-white">
    <div class="container">
      <div class="mx-auto max-w-4xl">
        <a 
          href="/es/blog" 
          class="mb-8 inline-flex items-center text-gray-400 hover:text-white transition-colors"
        >
          ← Volver al blog
        </a>
        <time class="text-sm text-gray-400">
          {formatDate(publishedDate, 'es-ES')}
        </time>
        <h1 class="mt-4 text-4xl font-black uppercase tracking-tighter md:text-5xl lg:text-6xl">
          {article.attributes.title}
        </h1>
      </div>
    </div>
  </section>

  <!-- Article Content -->
  <article class="bg-white py-16">
    <div class="container">
      <div class="mx-auto max-w-4xl">
        <div 
          class="prose prose-lg max-w-none prose-headings:font-black prose-headings:text-gray-900 prose-p:text-gray-700 prose-a:text-red-600 prose-a:no-underline hover:prose-a:underline"
          set:html={article.attributes.content}
        />
      </div>
    </div>
  </article>

  <!-- Related Articles -->
  {relatedArticles.length > 0 && (
    <section class="bg-gray-50 py-16">
      <div class="container">
        <div class="mx-auto max-w-6xl">
          <h2 class="mb-8 text-3xl font-black uppercase text-gray-900">
            Artículos <span class="text-red-600">Relacionados</span>
          </h2>
          <div class="grid gap-6 md:grid-cols-3">
            {relatedArticles.map((relatedArticle) => {
              if (!relatedArticle?.attributes?.title || !relatedArticle?.attributes?.slug) {
                return null;
              }

              const relatedDate = relatedArticle.attributes.createdAt 
                ? (relatedArticle.attributes.publishedAt 
                    ? new Date(relatedArticle.attributes.publishedAt)
                    : new Date(relatedArticle.attributes.createdAt))
                : new Date();
              
              return (
                <a 
                  href={`/es/blog/${relatedArticle.attributes.slug}`}
                  class="group block rounded-lg border border-gray-200 bg-white p-6 shadow-sm transition-shadow hover:shadow-lg"
                >
                  <time class="text-sm text-gray-500">
                    {formatDate(relatedDate, 'es-ES')}
                  </time>
                  <h3 class="mt-2 text-xl font-bold text-gray-900 group-hover:text-red-600 transition-colors">
                    {relatedArticle.attributes.title}
                  </h3>
                </a>
              );
            })}
          </div>
        </div>
      </div>
    </section>
  )}
</Layout>

<style>
  .prose img {
    @apply rounded-lg shadow-lg;
  }
  
  .prose pre {
    @apply bg-gray-900 text-gray-100 rounded-lg p-4 overflow-x-auto;
  }
  
  .prose code {
    @apply bg-gray-100 text-gray-900 px-1 py-0.5 rounded text-sm;
  }
  
  .prose pre code {
    @apply bg-transparent text-gray-100;
  }
</style>

